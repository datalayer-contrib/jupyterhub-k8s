# This is a GitHub workflow defining a set of jobs with a set of steps.
# ref: https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions
#
name: Test chart

# Trigger the workflow's on all PRs and pushes so that other contributors can
# run tests in their own forks. Avoid triggering these tests on changes to
# documentation only changes.
on:
  pull_request:
    paths-ignore:
      - "doc/**"
      - "**/test-docs.yaml"
      - "**.md"
      - "**/schema.yaml"
  push:
    paths-ignore:
      - "doc/**"
      - "**/test-docs.yaml"
      - "**.md"
      - "**/schema.yaml"
    branches-ignore:
      - "dependabot/**"
  workflow_dispatch:

defaults:
  run:
    # Declare bash be used by default in this workflow's "run" steps.
    #
    # NOTE: bash will by default run with:
    #   --noprofile: Ignore ~/.profile etc.
    #   --norc:      Ignore ~/.bashrc etc.
    #   -e:          Exit directly on errors
    #   -o pipefail: Don't mask errors from a command piped into another command
    shell: bash

jobs:
  lint_and_validate:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install dependencies
        run: |
          . ci/common
          setup_helm
          KUBEVAL_VERSION=0.15.0 setup_kubeval
          pip install chartpress yamllint

      - uses: pre-commit/action@v2.0.0

      - name: Lint and validate
        # NOTE: Kubernetes resource validation can only be done against
        #       Kubernetes versions with schemas available in:
        #       https://github.com/instrumenta/kubernetes-json-schema
        #
        # NOTE: The "helm template" command will evaluate
        #       .Capabilities.APIVersion.Has in templates based on a Kubernetes
        #       version associated with the helm binary's version. Since we
        #       render the templates with a specific helm version, we end up
        #       rendering templates using a mocked k8s version unrelated to the
        #       Kubernetes version we want to validate against. This issue has
        #       made us not validate against versions lower than 1.14.
        run: tools/templates/lint-and-validate.py --kubernetes-versions 1.14.0,1.18.0


  test:
    runs-on: ubuntu-20.04
    timeout-minutes: 20

    strategy:
      # Keep running even if one variation of the job fail
      fail-fast: false
      matrix:
        # We run this job multiple times with different parameterization
        # specified below, these parameters have no meaning on their own and
        # gain meaning on how job steps use them.
        #
        # k3s-version: https://github.com/rancher/k3s/tags
        # k3s-channel: https://update.k3s.io/v1-release/channels
        include:
          - k3s-channel: v1.20
            test: install
          - k3s-channel: v1.19
            test: install
          - k3s-channel: v1.18
            test: install
          - k3s-channel: v1.17
            test: install
          - k3s-channel: v1.16
            test: install

          # We run two upgrade tests where we first install an already released
          # Helm chart version and then upgrades to the version we are now
          # testing. We test upgrading from the latest stable version (like
          # 1.2.3), and one from the latest dev version (like
          # 1.2.3-n012.h1234abc).
          #
          # It can be very useful to see the "Helm diff" step's output from the
          # latest dev version.
          #
          # The upgrade-from input should match the version information from
          # https://jupyterhub.github.io/helm-chart/info.json
          - k3s-channel: v1.19
            test: upgrade
            upgrade-from: stable
          - k3s-channel: v1.19
            test: upgrade
            upgrade-from: dev

    steps:
      - uses: actions/checkout@v2
        with:
          # chartpress requires the full history
          fetch-depth: 0

      # Starts a k8s cluster with NetworkPolicy enforcement and installs both
      # kubectl and helm
      #
      # ref: https://github.com/jupyterhub/action-k3s-helm/
      - uses: jupyterhub/action-k3s-helm@v1
        with:
          k3s-channel: ${{ matrix.k3s-channel }}
          helm-version: v3.4.2
          metrics-enabled: false
          traefik-enabled: false
          docker-enabled: true

      # NOTE: actions/setup-python@v2 make use of a cache within the GitHub base
      #       environment and setup in a fraction of a second.
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install and run chartpress
        run: |
          . ./ci/common
          install_and_run_chartpress_and_pebble

      - name: "Install ${{ matrix.upgrade-from }} chart"
        if: matrix.test == 'upgrade'
        run: |
          . ./ci/common
          UPGRADE_FROM_VERSION=$(curl -sS https://jupyterhub.github.io/helm-chart/info.json | jq -er '.jupyterhub.${{ matrix.upgrade-from }}')

          echo ""
          echo "Installing already released jupyterhub version $UPGRADE_FROM_VERSION"
          helm install jupyterhub jupyterhub/jupyterhub --values dev-config.yaml --version=$UPGRADE_FROM_VERSION

          echo ""
          echo "Installing Helm diff plugin while k8s resources are initializing"
          helm plugin install https://github.com/databus23/helm-diff

      - name: "Helm diff ${{ matrix.upgrade-from }} chart with current chart"
        if: matrix.test == 'upgrade'
        run: |
          helm diff upgrade --install jupyterhub ./jupyterhub --values dev-config.yaml

      - name: "Await ${{ matrix.upgrade-from }} chart"
        if: matrix.test == 'upgrade'
        run: |
          . ./ci/common
          await_jupyterhub
          await_autohttps_tls_cert_acquisition
          await_autohttps_tls_cert_save

      - name: "Upgrade ${{ matrix.upgrade-from }} chart to current chart"
        run: |
          . ./ci/common
          helm upgrade --install jupyterhub ./jupyterhub --values dev-config.yaml
          await_jupyterhub
          await_autohttps_tls_cert_acquisition

      - name: Run tests
        run: |
          . ./ci/common
          # If you have problems with the tests add '--capture=no' to show stdout
          pytest --verbose --maxfail=2 --color=yes ./tests

      # ref: https://github.com/jupyterhub/action-k8s-namespace-report
      - name: Kubernetes namespace report
        uses: jupyterhub/action-k8s-namespace-report@v1
        if: always()
        with:
          important-workloads: deploy/hub deploy/proxy
